// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gmonrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagementPackServiceClient is the client API for ManagementPackService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagementPackServiceClient interface {
	ImportMP(ctx context.Context, in *IncomingServerMessage, opts ...grpc.CallOption) (*BooleanMessage, error)
	ExportMP(ctx context.Context, in *IncomingServerMessage, opts ...grpc.CallOption) (*JsonMessage, error)
	AddMP(ctx context.Context, in *IncomingServerMessage, opts ...grpc.CallOption) (*BooleanMessage, error)
	DeleteMP(ctx context.Context, in *IncomingServerMessage, opts ...grpc.CallOption) (*BooleanMessage, error)
	GetManagementPacks(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*JsonMessage, error)
	GetManagementPack(ctx context.Context, in *NumericMessage, opts ...grpc.CallOption) (*JsonMessage, error)
}

type managementPackServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManagementPackServiceClient(cc grpc.ClientConnInterface) ManagementPackServiceClient {
	return &managementPackServiceClient{cc}
}

func (c *managementPackServiceClient) ImportMP(ctx context.Context, in *IncomingServerMessage, opts ...grpc.CallOption) (*BooleanMessage, error) {
	out := new(BooleanMessage)
	err := c.cc.Invoke(ctx, "/ManagementPackService/ImportMP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementPackServiceClient) ExportMP(ctx context.Context, in *IncomingServerMessage, opts ...grpc.CallOption) (*JsonMessage, error) {
	out := new(JsonMessage)
	err := c.cc.Invoke(ctx, "/ManagementPackService/ExportMP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementPackServiceClient) AddMP(ctx context.Context, in *IncomingServerMessage, opts ...grpc.CallOption) (*BooleanMessage, error) {
	out := new(BooleanMessage)
	err := c.cc.Invoke(ctx, "/ManagementPackService/AddMP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementPackServiceClient) DeleteMP(ctx context.Context, in *IncomingServerMessage, opts ...grpc.CallOption) (*BooleanMessage, error) {
	out := new(BooleanMessage)
	err := c.cc.Invoke(ctx, "/ManagementPackService/DeleteMP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementPackServiceClient) GetManagementPacks(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*JsonMessage, error) {
	out := new(JsonMessage)
	err := c.cc.Invoke(ctx, "/ManagementPackService/GetManagementPacks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementPackServiceClient) GetManagementPack(ctx context.Context, in *NumericMessage, opts ...grpc.CallOption) (*JsonMessage, error) {
	out := new(JsonMessage)
	err := c.cc.Invoke(ctx, "/ManagementPackService/GetManagementPack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagementPackServiceServer is the server API for ManagementPackService service.
// All implementations must embed UnimplementedManagementPackServiceServer
// for forward compatibility
type ManagementPackServiceServer interface {
	ImportMP(context.Context, *IncomingServerMessage) (*BooleanMessage, error)
	ExportMP(context.Context, *IncomingServerMessage) (*JsonMessage, error)
	AddMP(context.Context, *IncomingServerMessage) (*BooleanMessage, error)
	DeleteMP(context.Context, *IncomingServerMessage) (*BooleanMessage, error)
	GetManagementPacks(context.Context, *EmptyMessage) (*JsonMessage, error)
	GetManagementPack(context.Context, *NumericMessage) (*JsonMessage, error)
	mustEmbedUnimplementedManagementPackServiceServer()
}

// UnimplementedManagementPackServiceServer must be embedded to have forward compatible implementations.
type UnimplementedManagementPackServiceServer struct {
}

func (UnimplementedManagementPackServiceServer) ImportMP(context.Context, *IncomingServerMessage) (*BooleanMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportMP not implemented")
}
func (UnimplementedManagementPackServiceServer) ExportMP(context.Context, *IncomingServerMessage) (*JsonMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportMP not implemented")
}
func (UnimplementedManagementPackServiceServer) AddMP(context.Context, *IncomingServerMessage) (*BooleanMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMP not implemented")
}
func (UnimplementedManagementPackServiceServer) DeleteMP(context.Context, *IncomingServerMessage) (*BooleanMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMP not implemented")
}
func (UnimplementedManagementPackServiceServer) GetManagementPacks(context.Context, *EmptyMessage) (*JsonMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManagementPacks not implemented")
}
func (UnimplementedManagementPackServiceServer) GetManagementPack(context.Context, *NumericMessage) (*JsonMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManagementPack not implemented")
}
func (UnimplementedManagementPackServiceServer) mustEmbedUnimplementedManagementPackServiceServer() {}

// UnsafeManagementPackServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagementPackServiceServer will
// result in compilation errors.
type UnsafeManagementPackServiceServer interface {
	mustEmbedUnimplementedManagementPackServiceServer()
}

func RegisterManagementPackServiceServer(s grpc.ServiceRegistrar, srv ManagementPackServiceServer) {
	s.RegisterService(&ManagementPackService_ServiceDesc, srv)
}

func _ManagementPackService_ImportMP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncomingServerMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementPackServiceServer).ImportMP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagementPackService/ImportMP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementPackServiceServer).ImportMP(ctx, req.(*IncomingServerMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementPackService_ExportMP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncomingServerMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementPackServiceServer).ExportMP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagementPackService/ExportMP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementPackServiceServer).ExportMP(ctx, req.(*IncomingServerMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementPackService_AddMP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncomingServerMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementPackServiceServer).AddMP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagementPackService/AddMP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementPackServiceServer).AddMP(ctx, req.(*IncomingServerMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementPackService_DeleteMP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncomingServerMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementPackServiceServer).DeleteMP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagementPackService/DeleteMP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementPackServiceServer).DeleteMP(ctx, req.(*IncomingServerMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementPackService_GetManagementPacks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementPackServiceServer).GetManagementPacks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagementPackService/GetManagementPacks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementPackServiceServer).GetManagementPacks(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementPackService_GetManagementPack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumericMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementPackServiceServer).GetManagementPack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ManagementPackService/GetManagementPack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementPackServiceServer).GetManagementPack(ctx, req.(*NumericMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// ManagementPackService_ServiceDesc is the grpc.ServiceDesc for ManagementPackService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagementPackService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ManagementPackService",
	HandlerType: (*ManagementPackServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ImportMP",
			Handler:    _ManagementPackService_ImportMP_Handler,
		},
		{
			MethodName: "ExportMP",
			Handler:    _ManagementPackService_ExportMP_Handler,
		},
		{
			MethodName: "AddMP",
			Handler:    _ManagementPackService_AddMP_Handler,
		},
		{
			MethodName: "DeleteMP",
			Handler:    _ManagementPackService_DeleteMP_Handler,
		},
		{
			MethodName: "GetManagementPacks",
			Handler:    _ManagementPackService_GetManagementPacks_Handler,
		},
		{
			MethodName: "GetManagementPack",
			Handler:    _ManagementPackService_GetManagementPack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gmonrpc.proto",
}

// AgentServiceClient is the client API for AgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentServiceClient interface {
	GetAgent(ctx context.Context, in *NumericMessage, opts ...grpc.CallOption) (*JsonMessage, error)
	GetAgents(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*JsonMessage, error)
	AddAgent(ctx context.Context, in *IncomingAgentMessage, opts ...grpc.CallOption) (*BooleanMessage, error)
	UpdateAgent(ctx context.Context, in *IncomingAgentMessage, opts ...grpc.CallOption) (*BooleanMessage, error)
	RemoveAgent(ctx context.Context, in *IncomingAgentMessage, opts ...grpc.CallOption) (*BooleanMessage, error)
	Contains(ctx context.Context, in *IncomingAgentMessage, opts ...grpc.CallOption) (*BooleanMessage, error)
}

type agentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentServiceClient(cc grpc.ClientConnInterface) AgentServiceClient {
	return &agentServiceClient{cc}
}

func (c *agentServiceClient) GetAgent(ctx context.Context, in *NumericMessage, opts ...grpc.CallOption) (*JsonMessage, error) {
	out := new(JsonMessage)
	err := c.cc.Invoke(ctx, "/AgentService/GetAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) GetAgents(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*JsonMessage, error) {
	out := new(JsonMessage)
	err := c.cc.Invoke(ctx, "/AgentService/GetAgents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) AddAgent(ctx context.Context, in *IncomingAgentMessage, opts ...grpc.CallOption) (*BooleanMessage, error) {
	out := new(BooleanMessage)
	err := c.cc.Invoke(ctx, "/AgentService/AddAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) UpdateAgent(ctx context.Context, in *IncomingAgentMessage, opts ...grpc.CallOption) (*BooleanMessage, error) {
	out := new(BooleanMessage)
	err := c.cc.Invoke(ctx, "/AgentService/UpdateAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) RemoveAgent(ctx context.Context, in *IncomingAgentMessage, opts ...grpc.CallOption) (*BooleanMessage, error) {
	out := new(BooleanMessage)
	err := c.cc.Invoke(ctx, "/AgentService/RemoveAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) Contains(ctx context.Context, in *IncomingAgentMessage, opts ...grpc.CallOption) (*BooleanMessage, error) {
	out := new(BooleanMessage)
	err := c.cc.Invoke(ctx, "/AgentService/Contains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServiceServer is the server API for AgentService service.
// All implementations must embed UnimplementedAgentServiceServer
// for forward compatibility
type AgentServiceServer interface {
	GetAgent(context.Context, *NumericMessage) (*JsonMessage, error)
	GetAgents(context.Context, *EmptyMessage) (*JsonMessage, error)
	AddAgent(context.Context, *IncomingAgentMessage) (*BooleanMessage, error)
	UpdateAgent(context.Context, *IncomingAgentMessage) (*BooleanMessage, error)
	RemoveAgent(context.Context, *IncomingAgentMessage) (*BooleanMessage, error)
	Contains(context.Context, *IncomingAgentMessage) (*BooleanMessage, error)
	mustEmbedUnimplementedAgentServiceServer()
}

// UnimplementedAgentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAgentServiceServer struct {
}

func (UnimplementedAgentServiceServer) GetAgent(context.Context, *NumericMessage) (*JsonMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgent not implemented")
}
func (UnimplementedAgentServiceServer) GetAgents(context.Context, *EmptyMessage) (*JsonMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgents not implemented")
}
func (UnimplementedAgentServiceServer) AddAgent(context.Context, *IncomingAgentMessage) (*BooleanMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAgent not implemented")
}
func (UnimplementedAgentServiceServer) UpdateAgent(context.Context, *IncomingAgentMessage) (*BooleanMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAgent not implemented")
}
func (UnimplementedAgentServiceServer) RemoveAgent(context.Context, *IncomingAgentMessage) (*BooleanMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAgent not implemented")
}
func (UnimplementedAgentServiceServer) Contains(context.Context, *IncomingAgentMessage) (*BooleanMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Contains not implemented")
}
func (UnimplementedAgentServiceServer) mustEmbedUnimplementedAgentServiceServer() {}

// UnsafeAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServiceServer will
// result in compilation errors.
type UnsafeAgentServiceServer interface {
	mustEmbedUnimplementedAgentServiceServer()
}

func RegisterAgentServiceServer(s grpc.ServiceRegistrar, srv AgentServiceServer) {
	s.RegisterService(&AgentService_ServiceDesc, srv)
}

func _AgentService_GetAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumericMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).GetAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AgentService/GetAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).GetAgent(ctx, req.(*NumericMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_GetAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).GetAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AgentService/GetAgents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).GetAgents(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_AddAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncomingAgentMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).AddAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AgentService/AddAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).AddAgent(ctx, req.(*IncomingAgentMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_UpdateAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncomingAgentMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).UpdateAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AgentService/UpdateAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).UpdateAgent(ctx, req.(*IncomingAgentMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_RemoveAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncomingAgentMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).RemoveAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AgentService/RemoveAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).RemoveAgent(ctx, req.(*IncomingAgentMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_Contains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncomingAgentMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).Contains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AgentService/Contains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).Contains(ctx, req.(*IncomingAgentMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// AgentService_ServiceDesc is the grpc.ServiceDesc for AgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AgentService",
	HandlerType: (*AgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAgent",
			Handler:    _AgentService_GetAgent_Handler,
		},
		{
			MethodName: "GetAgents",
			Handler:    _AgentService_GetAgents_Handler,
		},
		{
			MethodName: "AddAgent",
			Handler:    _AgentService_AddAgent_Handler,
		},
		{
			MethodName: "UpdateAgent",
			Handler:    _AgentService_UpdateAgent_Handler,
		},
		{
			MethodName: "RemoveAgent",
			Handler:    _AgentService_RemoveAgent_Handler,
		},
		{
			MethodName: "Contains",
			Handler:    _AgentService_Contains_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gmonrpc.proto",
}

// RoleServiceClient is the client API for RoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoleServiceClient interface {
	GetRoles(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*JsonMessage, error)
	GetRole(ctx context.Context, in *IncomingServerMessage, opts ...grpc.CallOption) (*JsonMessage, error)
	AddRole(ctx context.Context, in *IncomingServerMessage, opts ...grpc.CallOption) (*BooleanMessage, error)
	UpdateRole(ctx context.Context, in *IncomingServerMessage, opts ...grpc.CallOption) (*BooleanMessage, error)
	DeleteRole(ctx context.Context, in *IncomingServerMessage, opts ...grpc.CallOption) (*BooleanMessage, error)
}

type roleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoleServiceClient(cc grpc.ClientConnInterface) RoleServiceClient {
	return &roleServiceClient{cc}
}

func (c *roleServiceClient) GetRoles(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*JsonMessage, error) {
	out := new(JsonMessage)
	err := c.cc.Invoke(ctx, "/RoleService/GetRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) GetRole(ctx context.Context, in *IncomingServerMessage, opts ...grpc.CallOption) (*JsonMessage, error) {
	out := new(JsonMessage)
	err := c.cc.Invoke(ctx, "/RoleService/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) AddRole(ctx context.Context, in *IncomingServerMessage, opts ...grpc.CallOption) (*BooleanMessage, error) {
	out := new(BooleanMessage)
	err := c.cc.Invoke(ctx, "/RoleService/AddRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) UpdateRole(ctx context.Context, in *IncomingServerMessage, opts ...grpc.CallOption) (*BooleanMessage, error) {
	out := new(BooleanMessage)
	err := c.cc.Invoke(ctx, "/RoleService/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) DeleteRole(ctx context.Context, in *IncomingServerMessage, opts ...grpc.CallOption) (*BooleanMessage, error) {
	out := new(BooleanMessage)
	err := c.cc.Invoke(ctx, "/RoleService/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoleServiceServer is the server API for RoleService service.
// All implementations must embed UnimplementedRoleServiceServer
// for forward compatibility
type RoleServiceServer interface {
	GetRoles(context.Context, *EmptyMessage) (*JsonMessage, error)
	GetRole(context.Context, *IncomingServerMessage) (*JsonMessage, error)
	AddRole(context.Context, *IncomingServerMessage) (*BooleanMessage, error)
	UpdateRole(context.Context, *IncomingServerMessage) (*BooleanMessage, error)
	DeleteRole(context.Context, *IncomingServerMessage) (*BooleanMessage, error)
	mustEmbedUnimplementedRoleServiceServer()
}

// UnimplementedRoleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRoleServiceServer struct {
}

func (UnimplementedRoleServiceServer) GetRoles(context.Context, *EmptyMessage) (*JsonMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoles not implemented")
}
func (UnimplementedRoleServiceServer) GetRole(context.Context, *IncomingServerMessage) (*JsonMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedRoleServiceServer) AddRole(context.Context, *IncomingServerMessage) (*BooleanMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRole not implemented")
}
func (UnimplementedRoleServiceServer) UpdateRole(context.Context, *IncomingServerMessage) (*BooleanMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedRoleServiceServer) DeleteRole(context.Context, *IncomingServerMessage) (*BooleanMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedRoleServiceServer) mustEmbedUnimplementedRoleServiceServer() {}

// UnsafeRoleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoleServiceServer will
// result in compilation errors.
type UnsafeRoleServiceServer interface {
	mustEmbedUnimplementedRoleServiceServer()
}

func RegisterRoleServiceServer(s grpc.ServiceRegistrar, srv RoleServiceServer) {
	s.RegisterService(&RoleService_ServiceDesc, srv)
}

func _RoleService_GetRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).GetRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RoleService/GetRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).GetRoles(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncomingServerMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RoleService/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).GetRole(ctx, req.(*IncomingServerMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_AddRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncomingServerMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).AddRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RoleService/AddRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).AddRole(ctx, req.(*IncomingServerMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncomingServerMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RoleService/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).UpdateRole(ctx, req.(*IncomingServerMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncomingServerMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RoleService/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).DeleteRole(ctx, req.(*IncomingServerMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// RoleService_ServiceDesc is the grpc.ServiceDesc for RoleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RoleService",
	HandlerType: (*RoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRoles",
			Handler:    _RoleService_GetRoles_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _RoleService_GetRole_Handler,
		},
		{
			MethodName: "AddRole",
			Handler:    _RoleService_AddRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _RoleService_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _RoleService_DeleteRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gmonrpc.proto",
}

// MonitorAgentServiceClient is the client API for MonitorAgentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonitorAgentServiceClient interface {
	IncomingManagementPack(ctx context.Context, in *IncomingAgentMessage, opts ...grpc.CallOption) (*BooleanMessage, error)
}

type monitorAgentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitorAgentServiceClient(cc grpc.ClientConnInterface) MonitorAgentServiceClient {
	return &monitorAgentServiceClient{cc}
}

func (c *monitorAgentServiceClient) IncomingManagementPack(ctx context.Context, in *IncomingAgentMessage, opts ...grpc.CallOption) (*BooleanMessage, error) {
	out := new(BooleanMessage)
	err := c.cc.Invoke(ctx, "/MonitorAgentService/IncomingManagementPack", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonitorAgentServiceServer is the server API for MonitorAgentService service.
// All implementations must embed UnimplementedMonitorAgentServiceServer
// for forward compatibility
type MonitorAgentServiceServer interface {
	IncomingManagementPack(context.Context, *IncomingAgentMessage) (*BooleanMessage, error)
	mustEmbedUnimplementedMonitorAgentServiceServer()
}

// UnimplementedMonitorAgentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMonitorAgentServiceServer struct {
}

func (UnimplementedMonitorAgentServiceServer) IncomingManagementPack(context.Context, *IncomingAgentMessage) (*BooleanMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncomingManagementPack not implemented")
}
func (UnimplementedMonitorAgentServiceServer) mustEmbedUnimplementedMonitorAgentServiceServer() {}

// UnsafeMonitorAgentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonitorAgentServiceServer will
// result in compilation errors.
type UnsafeMonitorAgentServiceServer interface {
	mustEmbedUnimplementedMonitorAgentServiceServer()
}

func RegisterMonitorAgentServiceServer(s grpc.ServiceRegistrar, srv MonitorAgentServiceServer) {
	s.RegisterService(&MonitorAgentService_ServiceDesc, srv)
}

func _MonitorAgentService_IncomingManagementPack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncomingAgentMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorAgentServiceServer).IncomingManagementPack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MonitorAgentService/IncomingManagementPack",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorAgentServiceServer).IncomingManagementPack(ctx, req.(*IncomingAgentMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// MonitorAgentService_ServiceDesc is the grpc.ServiceDesc for MonitorAgentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MonitorAgentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MonitorAgentService",
	HandlerType: (*MonitorAgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IncomingManagementPack",
			Handler:    _MonitorAgentService_IncomingManagementPack_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gmonrpc.proto",
}
