// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpcapi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

var VERSION       = "1.0.0.0";
var HELLOSTRING   = "HELLO MOTO";

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RpcApiClient is the client API for RpcApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RpcApiClient interface {
	GetVersion(ctx context.Context, in *TextMessage, opts ...grpc.CallOption) (*TextMessage, error)
	GetHello(ctx context.Context, in *TextMessage, opts ...grpc.CallOption) (*TextMessage, error)
}

type rpcApiClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcApiClient(cc grpc.ClientConnInterface) RpcApiClient {
	return &rpcApiClient{cc}
}

func (c *rpcApiClient) GetVersion(ctx context.Context, in *TextMessage, opts ...grpc.CallOption) (*TextMessage, error) {
	out := new(TextMessage)
	err := c.cc.Invoke(ctx, "/RpcApi/GetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcApiClient) GetHello(ctx context.Context, in *TextMessage, opts ...grpc.CallOption) (*TextMessage, error) {
	out := new(TextMessage)
	err := c.cc.Invoke(ctx, "/RpcApi/GetHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcApiServer is the server API for RpcApi service.
// All implementations must embed UnimplementedRpcApiServer
// for forward compatibility
type RpcApiServer interface {
	GetVersion(context.Context, *TextMessage) (*TextMessage, error)
	GetHello(context.Context, *TextMessage) (*TextMessage, error)
	mustEmbedUnimplementedRpcApiServer()
}

// UnimplementedRpcApiServer must be embedded to have forward compatible implementations.
type UnimplementedRpcApiServer struct {
}

func (UnimplementedRpcApiServer) GetVersion(context.Context, *TextMessage) (*TextMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedRpcApiServer) GetHello(context.Context, *TextMessage) (*TextMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedRpcApiServer) mustEmbedUnimplementedRpcApiServer() {}


type SampleRpcApiServer struct {
}

func (SampleRpcApiServer) GetVersion(context.Context, *TextMessage) (*TextMessage, error) {
	var value *string;
	temp := VERSION;
	value = &temp
	return &TextMessage{Text: value}, nil
}
func (SampleRpcApiServer) GetHello(context.Context, *TextMessage) (*TextMessage, error) {
	var value *string;
    temp := HELLOSTRING;
	value = &temp;
	return &TextMessage{Text: value}, nil
}
func (SampleRpcApiServer) mustEmbedUnimplementedRpcApiServer() {}

// UnsafeRpcApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RpcApiServer will
// result in compilation errors.
type UnsafeRpcApiServer interface {
	mustEmbedUnimplementedRpcApiServer()
}

func RegisterRpcApiServer(s grpc.ServiceRegistrar, srv RpcApiServer) {
	s.RegisterService(&RpcApi_ServiceDesc, srv)
}

func _RpcApi_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcApiServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RpcApi/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcApiServer).GetVersion(ctx, req.(*TextMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcApi_GetHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcApiServer).GetHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RpcApi/GetHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcApiServer).GetHello(ctx, req.(*TextMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// RpcApi_ServiceDesc is the grpc.ServiceDesc for RpcApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RpcApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RpcApi",
	HandlerType: (*RpcApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _RpcApi_GetVersion_Handler,
		},
		{
			MethodName: "GetHello",
			Handler:    _RpcApi_GetHello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpcapi.proto",
}
